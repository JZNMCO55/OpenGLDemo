/* 一个学习OpenGL的demo，已配置好环境，以下代码通过贴图的方式显示一个矩形 */

extern "C" {
#include "SOIL/SOIL.h"
}

#include <GLEW/glew.h>
#include <GLFW/glfw3.h>
#include <GLUT/glut.h>
#include <GLM/gtc/matrix_transform.hpp>
#include <GLM/gtc/type_ptr.hpp>
#include <GLM/glm.hpp>
#include <GLM/gtx/string_cast.hpp>

#include "Shader.h"
#include "Camera.h"
#include "Model.h"
#include "Mesh.h"

#include <iostream>
#include <cstring>

const GLint WIDTH = 800, HEIGHT = 600;
bool keys[1024] = { false };


GLfloat deltaTime = 0.0f;
GLfloat lastFrame = 0.0f;

GLfloat lastXPos = 400;
GLfloat lastYPos = 300;

// 偏移角和仰角
GLfloat yaw = 0;
GLfloat pitch = 0;

GLboolean firstMouse = true;

Camera camera;
glm::vec3 cameraPos = camera.GetCameraPos();
glm::vec3 cameraFront = camera.GetCameraFront();
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

glm::vec3 lightPos(1.2f, 1.0f, 2.0f);

// 回调函数
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);
void do_movement();
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);


int main()
{
    // 初始化glfw
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);

    // 创建窗口
    GLFWwindow* window = glfwCreateWindow(WIDTH, HEIGHT, "LearnOpenGL", nullptr, nullptr);
    glfwMakeContextCurrent(window);

    // 设置回调函数
    glfwSetKeyCallback(window, key_callback);
    //glfwSetCursorPosCallback(window, mouse_callback);
    glfwSetScrollCallback(window, scroll_callback);
    glewExperimental = GL_TRUE;
    // 初始化glew
    glewInit();

    // 定义视口维度
    glViewport(0, 0, WIDTH, HEIGHT);

    Model ourModel(R"(D:\ForStu\RenderMaster\OpenGL\Model\genshin\Hutao\Hutao.pmx)");
    Shader modelShader(R"(D:\ForStu\RenderMaster\OpenGL\LearnOpenGL\mesh\src\Shader\Model.ver)", R"(D:\ForStu\RenderMaster\OpenGL\LearnOpenGL\mesh\src\Shader\Model.frag)");

    glEnable(GL_DEPTH_TEST);

    //// 加载贴图
    //GLuint diffuseMap;
    //glGenTextures(1, &diffuseMap);
    //int width, height;
    //unsigned char* image;

//    //光照贴图
//    image = SOIL_load_image(R"(D:\ForStu\RenderMaster\OpenGL\LearnOpenGL\fortest\src\Textures\glass_dif.png)", &width, &height, 0, SOIL_LOAD_RGB);
//    glBindTexture(GL_TEXTURE_2D, diffuseMap);
//    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
//    glGenerateMipmap(GL_TEXTURE_2D);
//    SOIL_free_image_data(image);
//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR_MIPMAP_NEAREST);
//    glBindTexture(GL_TEXTURE_2D, 0);
//
//    GLuint specularMap;
//    glGenTextures(1, &specularMap);
//    image = SOIL_load_image(R"(D:\ForStu\RenderMaster\OpenGL\LearnOpenGL\fortest\src\Textures\glass_ddn.png)", &width, &height, 0, SOIL_LOAD_RGB);
//    glBindTexture(GL_TEXTURE_2D, specularMap);
//    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
//    glGenerateMipmap(GL_TEXTURE_2D);
//    SOIL_free_image_data(image);
//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
//    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR_MIPMAP_NEAREST);
//    glBindTexture(GL_TEXTURE_2D, 0);
//
//    float vertices[] = {
//0.320384, 14.0575, 0.507779, 0.496902, -0.240822, 0.833674, 0.439941, 0.546387,
//0.385196, 13.9845, 0.445066, 0.524613, -0.236702, 0.817743, 0.541992, 0.62793,
//0.416643, 14.1143, 0.462461, 0.581713, -0.161901, 0.797082, 0.564941, 0.478027,
//0.629804, 14.3658, 0.22099, 0.836756, -0.066775, 0.543443, 0.941895, 0.213379,
//0.643727, 14.5118, 0.201993, 0.921262, -0.037477, 0.387066, 0.975098, 0.052856,
//0.624523, 14.5361, 0.250058, 0.904508, -0.046785, 0.423872, 0.918945, 0.020493,
//0.624523, 14.5361, 0.250058, 0.904508, -0.046785, 0.423872, 0.918945, 0.020493,
//0.626923, 14.3577, 0.224195, 0.872829, -0.062532, 0.483963, 0.937012, 0.220093,
//0.629804, 14.3658, 0.22099, 0.836756, -0.066775, 0.543443, 0.941895, 0.213379,
//0.626923, 14.3577, 0.224195, 0.872829, -0.062532, 0.483963, 0.937012, 0.220093,
//0.624523, 14.5361, 0.250058, 0.904508, -0.046785, 0.423872, 0.918945, 0.020493,
//0.598598, 14.5199, 0.300183, 0.882595, -0.08713, 0.461959, 0.855957, 0.035706,
//0.598598, 14.5199, 0.300183, 0.882595, -0.08713, 0.461959, 0.855957, 0.035706,
//0.605319, 14.3333, 0.262418, 0.849178, -0.075198, 0.522691, 0.887207, 0.248535,
//0.626923, 14.3577, 0.224195, 0.872829, -0.062532, 0.483963, 0.937012, 0.220093,
//0.516982, 14.2522, 0.379605, 0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//0.605319, 14.3333, 0.262418, 0.849178, -0.075198, 0.522691, 0.887207, 0.248535,
//0.598598, 14.5199, 0.300183, 0.882595, -0.08713, 0.461959, 0.855957, 0.035706,
//0.598598, 14.5199, 0.300183, 0.882595, -0.08713, 0.461959, 0.855957, 0.035706,
//0.571713, 14.5037, 0.351682, 0.872402, -0.137791, 0.468886, 0.791016, 0.05304,
//0.516982, 14.2522, 0.379605, 0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//0.516982, 14.2522, 0.379605, 0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//0.571713, 14.5037, 0.351682, 0.872402, -0.137791, 0.468886, 0.791016, 0.05304,
//0.522263, 14.4875, 0.422635, 0.784936, -0.128483, 0.606067, 0.692383, 0.065186,
//0.516982, 14.2522, 0.379605, 0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//0.522263, 14.4875, 0.422635, 0.784936, -0.128483, 0.606067, 0.692383, 0.065186,
//0.445928, 14.4794, 0.506406, 0.676748, -0.146733, 0.721427, 0.564941, 0.069946,
//0.445928, 14.4794, 0.506406, 0.676748, -0.146733, 0.721427, 0.564941, 0.069946,
//0.458891, 14.1711, 0.43179, 0.671468, -0.119236, 0.731346, 0.626953, 0.414551,
//0.516982, 14.2522, 0.379605, 0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//0.340788, 14.2036, 0.53433, 0.504624, -0.160955, 0.84817, 0.44751, 0.374512,
//0.458891, 14.1711, 0.43179, 0.671468, -0.119236, 0.731346, 0.626953, 0.414551,
//0.445928, 14.4794, 0.506406, 0.676748, -0.146733, 0.721427, 0.564941, 0.069946,
//0.416643, 14.1143, 0.462461, 0.581713, -0.161901, 0.797082, 0.564941, 0.478027,
//0.458891, 14.1711, 0.43179, 0.671468, -0.119236, 0.731346, 0.626953, 0.414551,
//0.340788, 14.2036, 0.53433, 0.504624, -0.160955, 0.84817, 0.44751, 0.374512,
//0.340788, 14.2036, 0.53433, 0.504624, -0.160955, 0.84817, 0.44751, 0.374512,
//0.335027, 14.1468, 0.525174, 0.477889, -0.20603, 0.853877, 0.446777, 0.441406,
//0.416643, 14.1143, 0.462461, 0.581713, -0.161901, 0.797082, 0.564941, 0.478027,
//0.335027, 14.1468, 0.525174, 0.477889, -0.20603, 0.853877, 0.446777, 0.441406,
//0.320384, 14.0575, 0.507779, 0.496902, -0.240822, 0.833674, 0.439941, 0.546387,
//0.416643, 14.1143, 0.462461, 0.581713, -0.161901, 0.797082, 0.564941, 0.478027,
//0.265893, 14.0981, 0.546231, 0.416272, -0.20838, 0.885006, 0.362549, 0.494141,
//0.320384, 14.0575, 0.507779, 0.496902, -0.240822, 0.833674, 0.439941, 0.546387,
//0.335027, 14.1468, 0.525174, 0.477889, -0.20603, 0.853877, 0.446777, 0.441406,
//0.335027, 14.1468, 0.525174, 0.477889, -0.20603, 0.853877, 0.446777, 0.441406,
//0.235407, 14.1873, 0.577817, 0.397565, -0.153874, 0.904569, 0.315918, 0.399658,
//0.265893, 14.0981, 0.546231, 0.416272, -0.20838, 0.885006, 0.362549, 0.494141,
//0.235407, 14.1873, 0.577817, 0.397565, -0.153874, 0.904569, 0.315918, 0.399658,
//0.335027, 14.1468, 0.525174, 0.477889, -0.20603, 0.853877, 0.446777, 0.441406,
//0.340788, 14.2036, 0.53433, 0.504624, -0.160955, 0.84817, 0.44751, 0.374512,
//0.340788, 14.2036, 0.53433, 0.504624, -0.160955, 0.84817, 0.44751, 0.374512,
//0.195679, 14.2522, 0.604825, 0.349742, -0.162297, 0.922666, 0.262451, 0.323242,
//0.235407, 14.1873, 0.577817, 0.397565, -0.153874, 0.904569, 0.315918, 0.399658,
//0.195679, 14.2522, 0.604825, 0.349742, -0.162297, 0.922666, 0.262451, 0.323242,
//0.340788, 14.2036, 0.53433, 0.504624, -0.160955, 0.84817, 0.44751, 0.374512,
//0.358791, 14.4712, 0.573697, 0.521043, -0.169988, 0.83639, 0.444092, 0.078552,
//0.445928, 14.4794, 0.506406, 0.676748, -0.146733, 0.721427, 0.564941, 0.069946,
//0.358791, 14.4712, 0.573697, 0.521043, -0.169988, 0.83639, 0.444092, 0.078552,
//0.340788, 14.2036, 0.53433, 0.504624, -0.160955, 0.84817, 0.44751, 0.374512,
//0.358791, 14.4712, 0.573697, 0.521043, -0.169988, 0.83639, 0.444092, 0.078552,
//0.246449, 14.4631, 0.627713, 0.361461, -0.186132, 0.913602, 0.306152, 0.084412,
//0.195679, 14.2522, 0.604825, 0.349742, -0.162297, 0.922666, 0.262451, 0.323242,
//0.195679, 14.2522, 0.604825, 0.349742, -0.162297, 0.922666, 0.262451, 0.323242,
//0.246449, 14.4631, 0.627713, 0.361461, -0.186132, 0.913602, 0.306152, 0.084412,
//0.121145, 14.455, 0.659757, 0.189581, -0.167394, 0.967467, 0.1604, 0.093323,
//0.121145, 14.455, 0.659757, 0.189581, -0.167394, 0.967467, 0.1604, 0.093323,
//0.150431, 14.2766, 0.621305, 0.236579, -0.167364, 0.95706, 0.210327, 0.291504,
//0.195679, 14.2522, 0.604825, 0.349742, -0.162297, 0.922666, 0.262451, 0.323242,
//0.071395, 14.309, 0.642362, 0.142247, -0.164739, 0.976012, 0.116638, 0.258057,
//0.150431, 14.2766, 0.621305, 0.236579, -0.167364, 0.95706, 0.210327, 0.291504,
//0.121145, 14.455, 0.659757, 0.189581, -0.167394, 0.967467, 0.1604, 0.093323,
//0.009703, 14.3252, 0.651059, 0.108829, -0.159215, 0.981201, 0.05957, 0.245239,
//0.071395, 14.309, 0.642362, 0.142247, -0.164739, 0.976012, 0.116638, 0.258057,
//0.121145, 14.455, 0.659757, 0.189581, -0.167394, 0.967467, 0.1604, 0.093323,
//0.121145, 14.455, 0.659757, 0.189581, -0.167394, 0.967467, 0.1604, 0.093323,
//0.009703, 14.455, 0.673947, 0.124393, -0.172308, 0.977142, 0.046417, 0.099182,
//0.009703, 14.3252, 0.651059, 0.108829, -0.159215, 0.981201, 0.05957, 0.245239,
//0.009703, 14.3252, 0.651059, -0.108829, -0.159215, 0.981201, 0.05957, 0.245239,
//0.009703, 14.455, 0.673947, -0.124393, -0.172308, 0.977142, 0.046417, 0.099182,
//-0.101738, 14.455, 0.659757, -0.189489, -0.167425, 0.967467, 0.1604, 0.093323,
//-0.101738, 14.455, 0.659757, -0.189489, -0.167425, 0.967467, 0.1604, 0.093323,
//-0.051989, 14.309, 0.642362, -0.142247, -0.164739, 0.976012, 0.116638, 0.258057,
//0.009703, 14.3252, 0.651059, -0.108829, -0.159215, 0.981201, 0.05957, 0.245239,
//-0.051989, 14.309, 0.642362, -0.142247, -0.164739, 0.976012, 0.116638, 0.258057,
//-0.101738, 14.455, 0.659757, -0.189489, -0.167425, 0.967467, 0.1604, 0.093323,
//-0.131024, 14.2766, 0.621305, -0.236579, -0.167364, 0.95706, 0.210327, 0.291504,
//-0.176273, 14.2522, 0.604825, -0.350444, -0.163976, 0.922086, 0.262451, 0.323242,
//-0.131024, 14.2766, 0.621305, -0.236579, -0.167364, 0.95706, 0.210327, 0.291504,
//-0.101738, 14.455, 0.659757, -0.189489, -0.167425, 0.967467, 0.1604, 0.093323,
//-0.101738, 14.455, 0.659757, -0.189489, -0.167425, 0.967467, 0.1604, 0.093323,
//-0.227163, 14.4631, 0.627713, -0.36137, -0.186316, 0.913572, 0.306152, 0.084412,
//-0.176273, 14.2522, 0.604825, -0.350444, -0.163976, 0.922086, 0.262451, 0.323242,
//-0.176273, 14.2522, 0.604825, -0.350444, -0.163976, 0.922086, 0.262451, 0.323242,
//-0.227163, 14.4631, 0.627713, -0.36137, -0.186316, 0.913572, 0.306152, 0.084412,
//-0.339505, 14.4712, 0.573697, -0.521317, -0.169073, 0.836421, 0.444092, 0.078552,
//-0.339505, 14.4712, 0.573697, -0.521317, -0.169073, 0.836421, 0.444092, 0.078552,
//-0.321501, 14.2036, 0.534787, -0.504532, -0.176763, 0.845058, 0.44751, 0.372803,
//-0.176273, 14.2522, 0.604825, -0.350444, -0.163976, 0.922086, 0.262451, 0.323242,
//-0.321501, 14.2036, 0.534787, -0.504532, -0.176763, 0.845058, 0.44751, 0.372803,
//-0.339505, 14.4712, 0.573697, -0.521317, -0.169073, 0.836421, 0.444092, 0.078552,
//-0.426402, 14.4794, 0.506406, -0.677541, -0.146123, 0.720817, 0.564941, 0.069946,
//-0.426402, 14.4794, 0.506406, -0.677541, -0.146123, 0.720817, 0.564941, 0.069946,
//-0.439364, 14.1711, 0.43179, -0.662008, -0.123051, 0.73928, 0.626953, 0.414551,
//-0.321501, 14.2036, 0.534787, -0.504532, -0.176763, 0.845058, 0.44751, 0.372803,
//-0.497456, 14.2522, 0.379605, -0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//-0.439364, 14.1711, 0.43179, -0.662008, -0.123051, 0.73928, 0.626953, 0.414551,
//-0.426402, 14.4794, 0.506406, -0.677541, -0.146123, 0.720817, 0.564941, 0.069946,
//-0.426402, 14.4794, 0.506406, -0.677541, -0.146123, 0.720817, 0.564941, 0.069946,
//-0.502737, 14.4875, 0.422635, -0.784936, -0.128483, 0.606067, 0.692383, 0.065186,
//-0.497456, 14.2522, 0.379605, -0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//-0.497456, 14.2522, 0.379605, -0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//-0.502737, 14.4875, 0.422635, -0.784936, -0.128483, 0.606067, 0.692383, 0.065186,
//-0.552186, 14.5037, 0.351682, -0.872402, -0.137791, 0.468886, 0.791016, 0.05304,
//-0.497456, 14.2522, 0.379605, -0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//-0.552186, 14.5037, 0.351682, -0.872402, -0.137791, 0.468886, 0.791016, 0.05304,
//-0.579071, 14.5199, 0.300183, -0.882168, -0.086276, 0.462905, 0.855957, 0.035706,
//-0.579071, 14.5199, 0.300183, -0.882168, -0.086276, 0.462905, 0.855957, 0.035706,
//-0.585793, 14.3333, 0.262418, -0.847316, -0.075838, 0.52559, 0.887207, 0.248535,
//-0.497456, 14.2522, 0.379605, -0.782434, -0.119358, 0.611164, 0.717285, 0.32959,
//-0.607877, 14.3577, 0.224195, -0.869655, -0.062868, 0.489608, 0.937012, 0.220093,
//-0.585793, 14.3333, 0.262418, -0.847316, -0.075838, 0.52559, 0.887207, 0.248535,
//-0.579071, 14.5199, 0.300183, -0.882168, -0.086276, 0.462905, 0.855957, 0.035706,
//-0.579071, 14.5199, 0.300183, -0.882168, -0.086276, 0.462905, 0.855957, 0.035706,
//-0.604996, 14.5361, 0.250058, -0.90463, -0.044282, 0.423872, 0.918945, 0.020493,
//-0.607877, 14.3577, 0.224195, -0.869655, -0.062868, 0.489608, 0.937012, 0.220093,
//-0.610758, 14.3658, 0.22099, -0.835322, -0.064882, 0.545885, 0.941895, 0.213379,
//-0.607877, 14.3577, 0.224195, -0.869655, -0.062868, 0.489608, 0.937012, 0.220093,
//-0.604996, 14.5361, 0.250058, -0.90463, -0.044282, 0.423872, 0.918945, 0.020493,
//-0.604996, 14.5361, 0.250058, -0.90463, -0.044282, 0.423872, 0.918945, 0.020493,
//-0.6242, 14.5118, 0.201993, -0.921873, -0.034639, 0.385876, 0.975098, 0.052856,
//-0.610758, 14.3658, 0.22099, -0.835322, -0.064882, 0.545885, 0.941895, 0.213379,
//-0.31574, 14.1468, 0.525174, -0.495865, -0.194098, 0.8464, 0.446777, 0.440918,
//-0.300857, 14.0575, 0.507779, -0.496414, -0.24189, 0.833674, 0.439941, 0.546387,
//-0.246487, 14.0981, 0.546231, -0.415998, -0.209021, 0.885006, 0.362549, 0.494141,
//-0.246487, 14.0981, 0.546231, -0.415998, -0.209021, 0.885006, 0.362549, 0.494141,
//-0.216001, 14.1873, 0.577817, -0.421766, -0.127873, 0.89761, 0.315918, 0.399658,
//-0.31574, 14.1468, 0.525174, -0.495865, -0.194098, 0.8464, 0.446777, 0.440918,
//-0.31574, 14.1468, 0.525174, -0.495865, -0.194098, 0.8464, 0.446777, 0.440918,
//-0.216001, 14.1873, 0.577817, -0.421766, -0.127873, 0.89761, 0.315918, 0.399658,
//-0.176273, 14.2522, 0.604825, -0.350444, -0.163976, 0.922086, 0.262451, 0.323242,
//-0.176273, 14.2522, 0.604825, -0.350444, -0.163976, 0.922086, 0.262451, 0.323242,
//-0.321501, 14.2036, 0.534787, -0.504532, -0.176763, 0.845058, 0.44751, 0.372803,
//-0.31574, 14.1468, 0.525174, -0.495865, -0.194098, 0.8464, 0.446777, 0.440918,
//-0.31574, 14.1468, 0.525174, -0.495865, -0.194098, 0.8464, 0.446777, 0.440918,
//-0.321501, 14.2036, 0.534787, -0.504532, -0.176763, 0.845058, 0.44751, 0.372803,
//-0.439364, 14.1711, 0.43179, -0.662008, -0.123051, 0.73928, 0.626953, 0.414551,
//-0.439364, 14.1711, 0.43179, -0.662008, -0.123051, 0.73928, 0.626953, 0.414551,
//-0.397356, 14.1143, 0.462461, -0.571764, -0.12302, 0.811121, 0.564941, 0.478027,
//-0.31574, 14.1468, 0.525174, -0.495865, -0.194098, 0.8464, 0.446777, 0.440918,
//-0.300857, 14.0575, 0.507779, -0.496414, -0.24189, 0.833674, 0.439941, 0.546387,
//-0.31574, 14.1468, 0.525174, -0.495865, -0.194098, 0.8464, 0.446777, 0.440918,
//-0.397356, 14.1143, 0.462461, -0.571764, -0.12302, 0.811121, 0.564941, 0.478027,
//-0.397356, 14.1143, 0.462461, -0.571764, -0.12302, 0.811121, 0.564941, 0.478027,
//-0.36567, 13.9845, 0.445066, -0.523911, -0.237526, 0.817957, 0.541992, 0.62793,
//-0.300857, 14.0575, 0.507779, -0.496414, -0.24189, 0.833674, 0.439941, 0.546387
//    };
//    GLuint indices[] = {
//    0, 1, 2,
//    3, 4, 5,
//    6, 7, 8,
//    9, 10, 11,
//    12, 13, 14,
//    15, 16, 17,
//    18, 19, 20,
//    21, 22, 23,
//    24, 25, 26,
//    27, 28, 29,
//    30, 31, 32,
//    33, 34, 35,
//    36, 37, 38,
//    39, 40, 41,
//    42, 43, 44,
//    45, 46, 47,
//    48, 49, 50,
//    51, 52, 53,
//    54, 55, 56,
//    57, 58, 59,
//    60, 61, 62,
//    63, 64, 65,
//    66, 67, 68,
//    69, 70, 71,
//    72, 73, 74,
//    75, 76, 77,
//    78, 79, 80,
//    81, 82, 83,
//    84, 85, 86,
//    87, 88, 89,
//    90, 91, 92,
//    93, 94, 95,
//    96, 97, 98,
//    99, 100, 101,
//    102, 103, 104,
//    105, 106, 107,
//    108, 109, 110,
//    111, 112, 113,
//    114, 115, 116,
//    117, 118, 119,
//    120, 121, 122,
//    123, 124, 125,
//    126, 127, 128,
//    129, 130, 131,
//    132, 133, 134,
//    135, 136, 137,
//    138, 139, 140,
//    141, 142, 143,
//    144, 145, 146,
//    147, 148, 149,
//    150, 151, 152,
//    153, 154, 155
//    };
//    
//    std::vector<Vertex> m_vertices;
//    for (size_t i = 0; i < sizeof(vertices) / sizeof(float) / 8; i += 8)
//    {
//        Vertex tempVertex;
//        tempVertex.Position[0] = vertices[i];
//        tempVertex.Position[1] = vertices[i + 1];
//        tempVertex.Position[2] = vertices[i + 2];
//        tempVertex.Normal[0] = vertices[i + 3];
//        tempVertex.Normal[1] = vertices[i + 4];
//        tempVertex.Normal[2] = vertices[i + 5];
//        tempVertex.TexCoords[0] = vertices[i + 6];
//        tempVertex.TexCoords[1] = vertices[i + 7];
//        m_vertices.push_back(tempVertex);
//    }
//
//    std::vector<GLuint> m_indice;
//    for (size_t i = 0; i < sizeof(indices) / sizeof(float); i += 3)
//    {
//        m_indice.push_back(indices[i]);
//    }
//
//    std::vector<Texture> m_textures;
//    Texture texture1;
//    texture1.id = diffuseMap;
//    texture1.path = "glass_dif.png";
//    texture1.type = "texture_diffuse";
//
//    Texture texture2;
//    texture1.id = specularMap;
//    texture1.path = "glass_ddn.png";
//    texture1.type = "texture_specular";
//    m_textures.push_back(texture1);
//    m_textures.push_back(texture2);
//
//    Mesh mesh(m_vertices, m_indice, m_textures);


    // Game loop
    while (!glfwWindowShouldClose(window))
    {
        // 计算时间
        GLfloat currentFrame = glfwGetTime();
        deltaTime = currentFrame - lastFrame;
        lastFrame = currentFrame;
        // 检查事件
        glfwPollEvents();
        //do_movement();
        camera.DoMovement(deltaTime);
        // 清除颜色
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

        modelShader.Use();

        glm::mat4 projection = glm::perspective(glm::radians(camera.GetAspect()), (float)WIDTH / (float)HEIGHT, 0.1f, 100.0f);
        glm::mat4 view = camera.GetLookAtMatrix();

        glm::mat4 model = glm::mat4(1.0f);
        model = glm::translate(model, glm::vec3(0.0f, -1.f, 0.0f));
        model = glm::scale(model, glm::vec3(0.1));

        modelShader.SetInput(model, "model");
        modelShader.SetInput(projection, "projection");
        modelShader.SetInput(view, "view");
       
        ourModel.Draw(modelShader);
        //mesh.Draw(modelShader);

        // 交换缓存
        glfwSwapBuffers(window);
    }

    // 清除资源
    glfwTerminate();
    return 0;
}

// 回调函数
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)
{
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GL_TRUE);

    if (action == GLFW_PRESS)
    {
        //keys[key] = true;
        camera.SetKeysStatus(key, true);
    }
    else if (action == GLFW_RELEASE)
    {
        //keys[key] = false;
        camera.SetKeysStatus(key, false);
    }

}

// 键盘设置
void do_movement()
{
    GLfloat cameraSpeed = 5.0f * deltaTime;
    if (keys[GLFW_KEY_W])
    {
        cameraPos += cameraSpeed * cameraFront;
    }

    if (keys[GLFW_KEY_S])
    {
        cameraPos -= cameraSpeed * cameraFront;
    }

    if (keys[GLFW_KEY_A])
    {
        cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    }

    if (keys[GLFW_KEY_D])
    {
        cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
    }


}

void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
    camera.SetCurrentPos(xpos, ypos);
}

void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
    camera.SetScroll(xoffset, yoffset);
}